{"version":3,"sources":["components/Header.js","components/MediaThumbnail.js","components/VideoList.js","components/GetMedia.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","id","MediaThumbnail","alt","src","this","props","source","width","height","React","Component","VideoList","state","downloadUrl","getDownloadLink","event","console","log","setState","target","value","onChange","defaultValue","streams","map","video","key","fmt_id","url","format","href","class","disabled","GetMedia","thumbnail","isDataAvailable","showSpinner","error","getMediaUrl","getMediaDetails","a","getDownloadUrl","setTimeout","fetch","process","then","response","json","data","catch","err","style","marginTop","color","type","placeholder","onClick","checkIFDataIsAvailable","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.91d7a41e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header\">\r\n            <h2><span id=\"color-black\">Media</span> <span id=\"color-bisque\">Downloader</span></h2>\r\n            <h4>Download videos and pictures from over a 100 sites</h4>\r\n        </div>\r\n    )\r\n}\r\nexport default Header","import React from 'react'\r\n\r\nclass MediaThumbnail extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Media-file\">\r\n                <img alt='video thumbnail' src={this.props.source} width='500px' height='300px'></img>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default MediaThumbnail\r\n","import React from 'react';\r\n\r\nclass VideoList extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            downloadUrl: ''\r\n        }\r\n\r\n        this.getDownloadLink = event => {\r\n            console.log('We are here')\r\n            console.log(event)\r\n            this.setState({\r\n                downloadUrl: event.target.value\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Video-List\">\r\n                <div>\r\n                    <span><b>Quality</b></span>\r\n                    <select onChange={this.getDownloadLink}>\r\n                        <option defaultValue=\"quality\">Choose Media Quality</option>\r\n                        {\r\n                            this.props.streams.map(video => <option key={video.fmt_id} value={video.url}>{video.format}</option>)\r\n                        }\r\n                    </select>\r\n                </div>\r\n                <span>\r\n                    <a className=\"download-btn\" href={this.state.downloadUrl}><i class=\"fa fa-download\"></i>  Download</a>\r\n                    <button disabled={true} >Save to Cloud</button>\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default VideoList;","import React from 'react'\r\nimport MediaThumbnail from './MediaThumbnail'\r\nimport VideoList from './VideoList'\r\nimport '../App.css';\r\n\r\n\r\nclass GetMedia extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            url: '',\r\n            thumbnail: '',\r\n            streams: [],\r\n            isDataAvailable: false,\r\n            showSpinner: false,\r\n            error: false\r\n        };\r\n\r\n        this.getMediaUrl = event => {\r\n            this.setState({ url: event.target.value })\r\n        }\r\n\r\n        this.getMediaDetails = async () => {\r\n            let url = this.state.url\r\n            this.setState({ showSpinner: true, error: false })\r\n            console.log(url)\r\n            this.getDownloadUrl(url)\r\n        }\r\n    }\r\n\r\n\r\n    getDownloadUrl(url) {\r\n        setTimeout(() => {\r\n            fetch(`https://getvideo.p.rapidapi.com/?url=${url}`, {\r\n                \"method\": \"GET\",\r\n                \"headers\": {\r\n                    \"x-rapidapi-host\": \"getvideo.p.rapidapi.com\",\r\n                    \"x-rapidapi-key\": process.env.REACT_APP_RAPID_API_KEY,\r\n                    \"content-type\": \"application/json\"\r\n                }\r\n            })\r\n                .then(response => {\r\n                    response.json()\r\n                        .then(data => {\r\n                            console.log(data)\r\n                            this.setState({\r\n                                thumbnail: data.thumbnail,\r\n                                streams: data.streams || '',\r\n                                isDataAvailable: true\r\n                            })\r\n                        })\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    this.setState({ error: true })\r\n                });\r\n        }, 10000)\r\n\r\n\r\n    }\r\n\r\n    checkIFDataIsAvailable() {\r\n        if (this.state.isDataAvailable && this.state.showSpinner) {\r\n            if (this.state.thumbnail && this.state.streams) {\r\n                return (\r\n                    <div>\r\n                        <MediaThumbnail source={this.state.thumbnail} />\r\n                        <VideoList streams={this.state.streams} />\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n        else if (this.state.showSpinner === true && this.state.error === false) {\r\n            return (\r\n                <div style={{marginTop:'40px'}}>\r\n                    <img width=\"100px\" height=\"100px\" src=\"spinner.gif\"></img>\r\n                    <p style={{ color: 'black' }}>Fetching Data</p>\r\n                </div>\r\n            )\r\n        }\r\n        else if (this.state.error) {\r\n            return (\r\n                <h1> An Error Occured</h1>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"input-url\" ><input type=\"text\" placeholder=\"Enter Media URL\" onChange={this.getMediaUrl} /></div>\r\n                <div className=\"get-media\">\r\n                    <button id=\"get-media-btn\" onClick={this.getMediaDetails}>Get Media</button>\r\n                    {\r\n                        this.checkIFDataIsAvailable()\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GetMedia","import React from 'react';\r\n\r\nclass Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"footer\">\r\n                <footer>Built by <a href=\"https://github.com/stanleenwosu\">bits_of_lee</a></footer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer","import React from 'react';\nimport Header from './components/Header';\nimport './App.css';\nimport GetMedia from './components/GetMedia';\nimport Footer from './components/Footer';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <GetMedia />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}